#ifndef PREXY_CLIENT_MAIN_H_
#define PREXY_CLIENT_MAIN_H_

/* Generated by prexy from: main.c */

#include "prexy.h"

// prexy enum token_kind {
//     TOK_NONE,
//     TOK_COMMENT,
//     TOK_PATTERN,
//     TOK_SEMI,
//     TOK_COLON,
//     TOK_CMD,
//     TOK_EOF,
// };
#define token_kind_COUNT 7
#define token_kind_X(X)                                                        \
    X(TOK_NONE)                                                                \
    X(TOK_COMMENT)                                                             \
    X(TOK_PATTERN)                                                             \
    X(TOK_SEMI)                                                                \
    X(TOK_COLON)                                                               \
    X(TOK_CMD)                                                                 \
    X(TOK_EOF)

// prexy enum parser_state {
//     PS_LINE_START,
//     PS_PATTERN,
//     PS_PATTERN_DELIM,
//     PS_COMMAND,
// };
#define parser_state_COUNT 4
#define parser_state_X(X)                                                      \
    X(PS_LINE_START)                                                           \
    X(PS_PATTERN)                                                              \
    X(PS_PATTERN_DELIM)                                                        \
    X(PS_COMMAND)

// prexy struct cli
// {
//     char const *filename;
//
//     px_attr(
//         cliopt,
//         .name = "--config",
//         .short_name = 'c',
//         .help = "Config file (default: " DEFAULT_CONFIG_FILENAME ")"
//     );
//     char const *config_filename;
//
//     px_attr(
//         cliopt,
//         .name = "--verbose",
//         .short_name = 'v',
//         .help = "Print debug messages"
//     );
//     bool verbose;
// };
#define cli_X(F)                                                               \
    F(simple, char const *, filename)                                          \
    F(simple, char const *, config_filename)                                   \
    F(simple, bool, verbose)

#define cli_X_cliopt(F)                                                        \
    F(simple, char const *, filename)                                          \
    F(cliopt,                                                                  \
      char const *,                                                            \
      config_filename,                                                         \
      .name = "--config",                                                      \
      .short_name = 'c',                                                       \
      .help = "Config file (default: " DEFAULT_CONFIG_FILENAME ")")            \
    F(cliopt,                                                                  \
      bool,                                                                    \
      verbose,                                                                 \
      .name = "--verbose",                                                     \
      .short_name = 'v',                                                       \
      .help = "Print debug messages")

#define cli_FIELDTYPE_filename char const *
#define cli_IS_MUT_PTR_filename 0
#define cli_IS_CONST_PTR_filename 1
#define cli_PTRTYPE_filename char
#define cli_FIELDTYPE_config_filename char const *
#define cli_IS_MUT_PTR_config_filename 0
#define cli_IS_CONST_PTR_config_filename 1
#define cli_PTRTYPE_config_filename char
#define cli_FIELDTYPE_verbose bool
#define cli_IS_MUT_PTR_verbose 0
#define cli_IS_CONST_PTR_verbose 0

#endif
